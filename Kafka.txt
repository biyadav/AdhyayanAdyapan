spring.cloud.stream.kafka.bindings.<binding-name>.consumer.configuration.max.poll.interval.ms
spring.cloud.stream.kafka.bindings.<binding-name>.consumer.configuration.max.poll.records

to set a default value for all 

spring.cloud.stream.kafka.bindings.default.consumer.configuration.max.poll.interval.ms
spring.cloud.stream.kafka.bindings.default.consumer.configuration.max.poll.records


*********************************************************************************************************************
KAFKA CONNECT

https://kafka.apache.org/documentation/#connectconfigs
https://rmoff.net/2019/08/15/reset-kafka-connect-source-connector-offsets/
https://rmoff.net/2020/01/16/changing-the-logging-level-for-kafka-connect-dynamically/
*********************************************************************************************************************
https://blog.tarkalabs.com/handling-message-duplication-in-kafka-8f4b9b312f91
https://medium.com/stream-zero/understanding-message-delivery-in-kafka-with-multiple-partitions-f9df4a32d498
https://blog.devops.dev/building-a-real-time-data-pipeline-with-kafka-snowflake-dbt-airflow-and-tableau-aebb03c6157c






We have observed kafka consumer group related issues in production.
                And below is our observation for those issues.
 
                Issue 1:
                                Account has observed lag for a particular topic.
                
	                Cause : We found out the topic has a no consumer group. So every new instance is creating an anonymous group 
	                                And old anonymous groups are idle and we have observed a lag.
	                                Even though all msg has been consumed with active anonymous groups but old anonymous groups are not deleted.
	                                After adding a group name we have only one group with zero lag.
	 
	                Soln : Most of the subscribers are multi instances in prod( we have atleast 3 minimum pods ), so adding group name is the best practise wherever necessary.
 
               Issue 2: 
                                After upgrading prod env from 22-07 to 22-12. we have observed processing of old data again for some topic.
 
                                cause: We have observed a change in consumer group name for that topic.
                                                Whenever a new group name is added, by default it will start consuming from earliest.
                                                So, new consumer group start processing old messages also.
 
                                                To avoid that, we can set it to consume from latest for the new consumer group.
 
                                                Config:
                                                                spring.cloud.stream.kafka.bindings.<channelName>.consumer.startOffset = latest
                                                
                                                                startOffset
						The starting offset for new groups. Allowed values: earliest and latest. If the consumer group is set explicitly for the consumer 'binding' (through spring.cloud.stream.bindings.<channelName>.group), 'startOffset' is set to earliest. Otherwise, it is set to latest for the anonymous consumer group. Also see resetOffsets (earlier in this list).
						Default: null (equivalent to earliest).
                                                Soln : Please cross check while changing consumer groups if old group already in prod

We found one probable cause for this issue.
 
		We have added fix in bill run ( adding consumer group "consumerGroup" to topic “mayTopic” ).
		Previously it was anonymous group.
		
		So, after latest deployment it might reprocess all existing events in “mayTopic” again
		and that caused to update billing cycles status to “Completed”.
 
                Spring doc ref:
                
                startOffset
		The starting offset for new groups. Allowed values: earliest and latest. If the consumer group is set explicitly for the consumer 'binding' (through spring.cloud.stream.bindings.<channelName>.group), 'startOffset' is set to earliest. Otherwise, it is set to latest for the anonymous consumer group. Also see resetOffsets (earlier in this list).
		Default: null (equivalent to earliest).
                https://cloud.spring.io/spring-cloud-static/spring-cloud-stream-binder-kafka/2.2.0.M1/spring-cloud-stream-binder-kafka.html
 
                Please set this startOffset, if we are changing any group name or creating a new group for topics which are already in prod if required.
